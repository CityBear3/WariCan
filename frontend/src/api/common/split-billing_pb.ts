// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file common/split-billing.proto (package common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message common.SplitBillingModel
 */
export class SplitBillingModel extends Message<SplitBillingModel> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string group_id = 3;
   */
  groupId = "";

  /**
   * @generated from field: int64 amount = 4;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string advance_payer_id = 5;
   */
  advancePayerId = "";

  /**
   * @generated from field: string split_billing_type = 6;
   */
  splitBillingType = "";

  /**
   * @generated from field: string status = 7;
   */
  status = "";

  constructor(data?: PartialMessage<SplitBillingModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.SplitBillingModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "advance_payer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "split_billing_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SplitBillingModel {
    return new SplitBillingModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SplitBillingModel {
    return new SplitBillingModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SplitBillingModel {
    return new SplitBillingModel().fromJsonString(jsonString, options);
  }

  static equals(a: SplitBillingModel | PlainMessage<SplitBillingModel> | undefined, b: SplitBillingModel | PlainMessage<SplitBillingModel> | undefined): boolean {
    return proto3.util.equals(SplitBillingModel, a, b);
  }
}

