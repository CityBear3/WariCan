// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file common/wallet.proto (package common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message common.WalletModel
 */
export class WalletModel extends Message<WalletModel> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: common.WalletModel.Balance balance = 3;
   */
  balance?: WalletModel_Balance;

  constructor(data?: PartialMessage<WalletModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.WalletModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "balance", kind: "message", T: WalletModel_Balance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalletModel {
    return new WalletModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalletModel {
    return new WalletModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalletModel {
    return new WalletModel().fromJsonString(jsonString, options);
  }

  static equals(a: WalletModel | PlainMessage<WalletModel> | undefined, b: WalletModel | PlainMessage<WalletModel> | undefined): boolean {
    return proto3.util.equals(WalletModel, a, b);
  }
}

/**
 * @generated from message common.WalletModel.Balance
 */
export class WalletModel_Balance extends Message<WalletModel_Balance> {
  /**
   * @generated from field: fixed64 amount = 1;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<WalletModel_Balance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.WalletModel.Balance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalletModel_Balance {
    return new WalletModel_Balance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalletModel_Balance {
    return new WalletModel_Balance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalletModel_Balance {
    return new WalletModel_Balance().fromJsonString(jsonString, options);
  }

  static equals(a: WalletModel_Balance | PlainMessage<WalletModel_Balance> | undefined, b: WalletModel_Balance | PlainMessage<WalletModel_Balance> | undefined): boolean {
    return proto3.util.equals(WalletModel_Balance, a, b);
  }
}

