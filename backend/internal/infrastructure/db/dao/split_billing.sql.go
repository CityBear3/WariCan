// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: split_billing.sql

package dao

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getSplitBillingByGroupID = `-- name: GetSplitBillingByGroupID :many
SELECT DISTINCT id, group_id, name, amount, advance_payer_id, split_billing_type, created_at, updated_at, status, split_billing_id
FROM "split_billing" AS sb
         JOIN (SELECT sbs.status,
                      sbs.split_billing_id
               FROM "split_billing_status" AS sbs
               WHERE sbs.split_billing_id = sb.id
               ORDER BY sbs.created_at DESC
               LIMIT 1) AS sbs2 ON sb.id = sbs2.split_billing_id
WHERE sb.group_id = $1
`

type GetSplitBillingByGroupIDRow struct {
	ID               uuid.UUID          `json:"id"`
	GroupID          uuid.UUID          `json:"group_id"`
	Name             string             `json:"name"`
	Amount           int32              `json:"amount"`
	AdvancePayerID   uuid.UUID          `json:"advance_payer_id"`
	SplitBillingType string             `json:"split_billing_type"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	Status           string             `json:"status"`
	SplitBillingID   uuid.UUID          `json:"split_billing_id"`
}

// :param groupID uuid
func (q *Queries) GetSplitBillingByGroupID(ctx context.Context, groupID uuid.UUID) ([]GetSplitBillingByGroupIDRow, error) {
	rows, err := q.db.Query(ctx, getSplitBillingByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSplitBillingByGroupIDRow{}
	for rows.Next() {
		var i GetSplitBillingByGroupIDRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.Amount,
			&i.AdvancePayerID,
			&i.SplitBillingType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.SplitBillingID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
