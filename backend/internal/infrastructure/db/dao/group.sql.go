// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package dao

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :exec
INSERT INTO "group" ("id", "name", "description", "owner_id", "created_at")
VALUES ($1, $2, $3, $4, $5)
`

type CreateGroupParams struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	OwnerID     uuid.UUID          `json:"owner_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) error {
	_, err := q.db.Exec(ctx, createGroup,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.OwnerID,
		arg.CreatedAt,
	)
	return err
}

type CreateGroupMemberParams struct {
	ID        uuid.UUID          `json:"id"`
	GroupID   uuid.UUID          `json:"group_id"`
	UserID    uuid.UUID          `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

const getGroupByID = `-- name: GetGroupByID :many
SELECT DISTINCT g.id,
                g.name,
                g.description,
                g.owner_id,
                gm.user_id
FROM "group" AS g
         JOIN "group_member" AS gm ON gm.group_id = g.id
WHERE g.id = $1
`

type GetGroupByIDRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	OwnerID     uuid.UUID `json:"owner_id"`
	UserID      uuid.UUID `json:"user_id"`
}

// :param groupID uuid
func (q *Queries) GetGroupByID(ctx context.Context, id uuid.UUID) ([]GetGroupByIDRow, error) {
	rows, err := q.db.Query(ctx, getGroupByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupByIDRow{}
	for rows.Next() {
		var i GetGroupByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
