// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: connection/connection.proto

package connectionApiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	connection "github.com/CityBear3/WariCan/protobuf/connection"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConnectionName is the fully-qualified name of the Connection service.
	ConnectionName = "warican.api.connection.Connection"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectionGetV1Procedure is the fully-qualified name of the Connection's GetV1 RPC.
	ConnectionGetV1Procedure = "/warican.api.connection.Connection/GetV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	connectionServiceDescriptor     = connection.File_connection_connection_proto.Services().ByName("Connection")
	connectionGetV1MethodDescriptor = connectionServiceDescriptor.Methods().ByName("GetV1")
)

// ConnectionClient is a client for the warican.api.connection.Connection service.
type ConnectionClient interface {
	GetV1(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[connection.ConnectionGetV1_Response], error)
}

// NewConnectionClient constructs a client for the warican.api.connection.Connection service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectionClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectionClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectionClient{
		getV1: connect.NewClient[emptypb.Empty, connection.ConnectionGetV1_Response](
			httpClient,
			baseURL+ConnectionGetV1Procedure,
			connect.WithSchema(connectionGetV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// connectionClient implements ConnectionClient.
type connectionClient struct {
	getV1 *connect.Client[emptypb.Empty, connection.ConnectionGetV1_Response]
}

// GetV1 calls warican.api.connection.Connection.GetV1.
func (c *connectionClient) GetV1(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[connection.ConnectionGetV1_Response], error) {
	return c.getV1.CallUnary(ctx, req)
}

// ConnectionHandler is an implementation of the warican.api.connection.Connection service.
type ConnectionHandler interface {
	GetV1(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[connection.ConnectionGetV1_Response], error)
}

// NewConnectionHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectionHandler(svc ConnectionHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectionGetV1Handler := connect.NewUnaryHandler(
		ConnectionGetV1Procedure,
		svc.GetV1,
		connect.WithSchema(connectionGetV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/warican.api.connection.Connection/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectionGetV1Procedure:
			connectionGetV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectionHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectionHandler struct{}

func (UnimplementedConnectionHandler) GetV1(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[connection.ConnectionGetV1_Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("warican.api.connection.Connection.GetV1 is not implemented"))
}
