// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: health/health.proto

package healthApiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	health "github.com/CityBear3/WariCan/protobuf/health"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HealthName is the fully-qualified name of the Health service.
	HealthName = "warican.api.health.Health"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthCheckProcedure is the fully-qualified name of the Health's Check RPC.
	HealthCheckProcedure = "/warican.api.health.Health/Check"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	healthServiceDescriptor     = health.File_health_health_proto.Services().ByName("Health")
	healthCheckMethodDescriptor = healthServiceDescriptor.Methods().ByName("Check")
)

// HealthClient is a client for the warican.api.health.Health service.
type HealthClient interface {
	Check(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[health.HealthCheckResponse], error)
}

// NewHealthClient constructs a client for the warican.api.health.Health service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &healthClient{
		check: connect.NewClient[emptypb.Empty, health.HealthCheckResponse](
			httpClient,
			baseURL+HealthCheckProcedure,
			connect.WithSchema(healthCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// healthClient implements HealthClient.
type healthClient struct {
	check *connect.Client[emptypb.Empty, health.HealthCheckResponse]
}

// Check calls warican.api.health.Health.Check.
func (c *healthClient) Check(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[health.HealthCheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// HealthHandler is an implementation of the warican.api.health.Health service.
type HealthHandler interface {
	Check(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[health.HealthCheckResponse], error)
}

// NewHealthHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthHandler(svc HealthHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthCheckHandler := connect.NewUnaryHandler(
		HealthCheckProcedure,
		svc.Check,
		connect.WithSchema(healthCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/warican.api.health.Health/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthCheckProcedure:
			healthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthHandler struct{}

func (UnimplementedHealthHandler) Check(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[health.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("warican.api.health.Health.Check is not implemented"))
}
