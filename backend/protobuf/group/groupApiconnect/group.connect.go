// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: group/group.proto

package groupApiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	group "github.com/CityBear3/WariCan/protobuf/group"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GroupName is the fully-qualified name of the Group service.
	GroupName = "warican.api.group.Group"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GroupCreateV1Procedure is the fully-qualified name of the Group's CreateV1 RPC.
	GroupCreateV1Procedure = "/warican.api.group.Group/CreateV1"
	// GroupGetV1Procedure is the fully-qualified name of the Group's GetV1 RPC.
	GroupGetV1Procedure = "/warican.api.group.Group/GetV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	groupServiceDescriptor        = group.File_group_group_proto.Services().ByName("Group")
	groupCreateV1MethodDescriptor = groupServiceDescriptor.Methods().ByName("CreateV1")
	groupGetV1MethodDescriptor    = groupServiceDescriptor.Methods().ByName("GetV1")
)

// GroupClient is a client for the warican.api.group.Group service.
type GroupClient interface {
	CreateV1(context.Context, *connect.Request[group.GroupCreateV1_Request]) (*connect.Response[group.GroupCreateV1_Response], error)
	GetV1(context.Context, *connect.Request[group.GroupGetV1_Request]) (*connect.Response[group.GroupGetV1_Response], error)
}

// NewGroupClient constructs a client for the warican.api.group.Group service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGroupClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GroupClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &groupClient{
		createV1: connect.NewClient[group.GroupCreateV1_Request, group.GroupCreateV1_Response](
			httpClient,
			baseURL+GroupCreateV1Procedure,
			connect.WithSchema(groupCreateV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getV1: connect.NewClient[group.GroupGetV1_Request, group.GroupGetV1_Response](
			httpClient,
			baseURL+GroupGetV1Procedure,
			connect.WithSchema(groupGetV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// groupClient implements GroupClient.
type groupClient struct {
	createV1 *connect.Client[group.GroupCreateV1_Request, group.GroupCreateV1_Response]
	getV1    *connect.Client[group.GroupGetV1_Request, group.GroupGetV1_Response]
}

// CreateV1 calls warican.api.group.Group.CreateV1.
func (c *groupClient) CreateV1(ctx context.Context, req *connect.Request[group.GroupCreateV1_Request]) (*connect.Response[group.GroupCreateV1_Response], error) {
	return c.createV1.CallUnary(ctx, req)
}

// GetV1 calls warican.api.group.Group.GetV1.
func (c *groupClient) GetV1(ctx context.Context, req *connect.Request[group.GroupGetV1_Request]) (*connect.Response[group.GroupGetV1_Response], error) {
	return c.getV1.CallUnary(ctx, req)
}

// GroupHandler is an implementation of the warican.api.group.Group service.
type GroupHandler interface {
	CreateV1(context.Context, *connect.Request[group.GroupCreateV1_Request]) (*connect.Response[group.GroupCreateV1_Response], error)
	GetV1(context.Context, *connect.Request[group.GroupGetV1_Request]) (*connect.Response[group.GroupGetV1_Response], error)
}

// NewGroupHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGroupHandler(svc GroupHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	groupCreateV1Handler := connect.NewUnaryHandler(
		GroupCreateV1Procedure,
		svc.CreateV1,
		connect.WithSchema(groupCreateV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	groupGetV1Handler := connect.NewUnaryHandler(
		GroupGetV1Procedure,
		svc.GetV1,
		connect.WithSchema(groupGetV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/warican.api.group.Group/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GroupCreateV1Procedure:
			groupCreateV1Handler.ServeHTTP(w, r)
		case GroupGetV1Procedure:
			groupGetV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGroupHandler returns CodeUnimplemented from all methods.
type UnimplementedGroupHandler struct{}

func (UnimplementedGroupHandler) CreateV1(context.Context, *connect.Request[group.GroupCreateV1_Request]) (*connect.Response[group.GroupCreateV1_Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("warican.api.group.Group.CreateV1 is not implemented"))
}

func (UnimplementedGroupHandler) GetV1(context.Context, *connect.Request[group.GroupGetV1_Request]) (*connect.Response[group.GroupGetV1_Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("warican.api.group.Group.GetV1 is not implemented"))
}
